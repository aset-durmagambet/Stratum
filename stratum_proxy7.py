import asyncio
import socket
socket.setdefaulttimeout(60)
import threading
import json
import hashlib
import binascii
import logging
from logging.handlers import RotatingFileHandler
import time
import sqlite3
import os
import signal
import sys
import psutil
import requests
from aiohttp import web
from socketserver import ThreadingMixIn, TCPServer, StreamRequestHandler
from threading import Lock
import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ HTTP –≤ TelegramHandler
POOL_HOST = os.getenv("POOL_HOST", "165.22.46.160")  # –ó–∞–º–µ–Ω–∏–ª–∏ stratum.braiins.com –Ω–∞ IP, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –ø–∏–Ω–≥–æ–º
POOL_PORT = int(os.getenv("POOL_PORT", 3333))  # –ü–æ—Ä—Ç –æ—Å—Ç–∞–µ—Ç—Å—è 3333, —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è Braiins Pool

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è ASIC
ASIC_PROXY_HOST = os.getenv("ASIC_PROXY_HOST", "0.0.0.0")  # –°–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
ASIC_PROXY_PORT = int(os.getenv("ASIC_PROXY_PORT", 3333))  # –ü–æ—Ä—Ç –¥–ª—è ASIC, —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—É–ª–æ–º, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.getenv("DB_PATH", "asic_proxy.db")  # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–±–ª–µ–º —Å —ç—Ç–∏–º –Ω–µ—Ç

# –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
VERSION = "1.0.0"  # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7207281851:AAEzDaJmpvA6KB9xgTo7dnEbnW4LUtnH4FQ")  # –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–º
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "480223056")  #

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ASICProxy")
logger.setLevel(logging.INFO)
handler = RotatingFileHandler("asic_proxy.log", maxBytes=10*1024*1024, backupCount=5)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fix_hex_string
last_hex_warning_time = 0
hex_warning_shown = False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def handle_shutdown(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    if 'server' in globals():
        server.shutdown()
    sys.exit(0)

signal.signal(signal.SIGTERM, handle_shutdown)
signal.signal(signal.SIGINT, handle_shutdown)

async def ensure_port_available(port: int):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç."""
    logger.info(f"[PORT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {port}...")
    processed_pids = set()
    port_in_use_initial = any(p.laddr.port == port for p in psutil.net_connections(kind='inet'))
    if not port_in_use_initial:
        logger.info(f"[PORT] –ü–æ—Ä—Ç {port} —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω.")
        return
    for conn in psutil.net_connections(kind='inet'):
        if conn.laddr.port == port and conn.pid not in processed_pids:
            try:
                proc = psutil.Process(conn.pid)
                logger.info(f"[PORT IN USE] –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å PID={conn.pid}, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç :{port}")
                proc.terminate()
                try:
                    proc.wait(timeout=10)
                except psutil.TimeoutExpired:
                    logger.warning(f"[PORT] –ü—Ä–æ—Ü–µ—Å—Å PID={conn.pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º...")
                    proc.kill()
                processed_pids.add(conn.pid)
                await asyncio.sleep(2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
    timeout = 60
    start_time = time.time()
    while True:
        if time.time() - start_time > timeout:
            logger.error(f"[PORT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port} –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}")
        port_in_use = any(p.laddr.port == port for p in psutil.net_connections(kind='inet'))
        if not port_in_use:
            logger.info(f"[PORT] –ü–æ—Ä—Ç {port} –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è.")
            break
        await asyncio.sleep(1)

class TelegramHandler(logging.Handler):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç aiohttp –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—è—Å—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º event loop.
    """
    def __init__(self, token, chat_id, loop=None):
        super().__init__()
        self.token = token
        self.chat_id = chat_id
        self.url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.enabled = True
        self.shutdown_flag = False
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π loop, –ª–∏–±–æ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π
        self.loop = loop  

    async def send_message(self, message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º."""
        async with aiohttp.ClientSession() as session:
            payload = {
                "chat_id": self.chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            try:
                async with session.post(self.url, data=payload, timeout=10) as resp:
                    await resp.text()
            except Exception as e:
                print(f"[TelegramHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

    def send_response(self, message):
        """
        –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–æ —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π.
        """
        asyncio.run_coroutine_threadsafe(self.send_message(message), self.loop)

    def handle_command(self, text):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /shutdown, /disable, /enable, /status, /help.
        """
        cmd = text.strip().lower()
        if cmd == "/shutdown":
            self.send_response("üõë –ü—Ä–æ–∫—Å–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /shutdown")
            self.disable()
            logging.warning("[TELEGRAM] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /shutdown, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–∫—Å–∏...")
            sys.exit(0)
        elif cmd == "/disable":
            self.disable()
            logging.info("[TELEGRAM] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /disable ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
            self.send_response("üì¥ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
        elif cmd == "/enable":
            self.enable()
            logging.info("[TELEGRAM] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /enable ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.")
            self.send_response("‚úÖ Telegram –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.")
        elif cmd == "/status":
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è proxy —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞.
            accepted = proxy.accepted_shares if 'proxy' in globals() else 0
            rejected = proxy.rejected_shares if 'proxy' in globals() else 0
            msg = f"üìä –®–∞—Ä—ã: –ø—Ä–∏–Ω—è—Ç—ã—Ö {accepted}, –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã—Ö {rejected}"
            logging.info("[TELEGRAM] –ö–æ–º–∞–Ω–¥–∞ /status ‚Äî %s" % msg)
            self.send_response(msg)
        elif cmd == "/help":
            self.send_response("üßæ –ö–æ–º–∞–Ω–¥—ã:\n/status ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/enable ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ª–æ–≥\n/disable ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–æ–≥\n/shutdown ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É")

    def emit(self, record):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ emit –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–æ–≥–∞—Ö.
        –û—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ 'submit', 'notify', 'asic', 'pool', 'share', 'error'.
        """
        if self.shutdown_flag or not self.enabled:
            return
        try:
            log_entry = self.format(record)
            keywords = ["submit", "notify", "asic", "pool", "share", "error"]
            if any(keyword in log_entry.lower() for keyword in keywords):
                message = f"üö® <b>{record.levelname}</b>\n<code>{log_entry}</code>"
                asyncio.run_coroutine_threadsafe(self.send_message(message), self.loop)
        except Exception as e:
            print(f"[TelegramHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

    def disable(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º."""
        self.shutdown_flag = True
        self.enabled = False

    def enable(self):
        """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –¢–µ–ª–µ–≥—Ä–∞–º."""
        self.enabled = True
        self.shutdown_flag = False

class ThreadedTCPServer(ThreadingMixIn, TCPServer):
    allow_reuse_address = True

class ASICHandler(StreamRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Ç ASIC-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    def handle(self):
        logger.info(f"[ASIC] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {self.client_address[0]}")
        self.server.asic_socket = self.request
        while True:
            try:
                data = self.request.recv(4096).decode('utf-8')
                if data:
                    logger.info(f"[ASIC DATA] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ASIC: {data}")
                    try:
                        msg = json.loads(data)
                        if msg.get("method") == "mining.configure":
                            response = {
                                "id": msg["id"],
                                "result": {"version-rolling": True},
                                "error": None
                            }
                            self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                            logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ mining.configure: {response}")
                        elif msg.get("method") == "mining.subscribe":
                            while not (hasattr(self.server, 'proxy') and self.server.proxy.extranonce1 is not None and self.server.proxy.extranonce2_size):
                                time.sleep(1)
                            response = {
                                "id": msg["id"],
                                "result": [["mining.notify", "ae6812eb4cd7735a"]],
                                "extranonce1": self.server.proxy.extranonce1,
                                "extranonce2_size": self.server.proxy.extranonce2_size
                            }
                            self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                            logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ mining.subscribe: {response}")
                            auth_msg = {
                                "id": msg["id"] + 1,
                                "method": "mining.authorize",
                                "params": ["worker", "x"]
                            }
                            self.server.proxy._send_to_pool(auth_msg)
                            self.request.sendall((json.dumps(auth_msg) + '\n').encode('utf-8'))
                            logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω mining.authorize: {auth_msg}")
                        elif msg.get("method") == "mining.authorize":
                            if hasattr(self.server, 'proxy'):
                                self.server.proxy._send_to_pool(msg)
                                response = {"id": msg["id"], "result": True, "error": None}
                                self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                                logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ mining.authorize: {response}")
                                self.server.proxy.authorized = True
                        elif msg.get("method") == "mining.submit" and hasattr(self.server, 'proxy'):
                            self.server.proxy._send_to_pool(msg)
                            logger.info(f"[ASIC] –®–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –ø—É–ª: {msg}")
                        elif hasattr(self.server, 'proxy'):
                            self.server.proxy._send_to_pool(msg)
                    except json.JSONDecodeError:
                        logger.error(f"[ASIC DATA] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç ASIC: {data}")
                else:
                    logger.warning("[ASIC] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ASIC —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                    break
            except Exception as e:
                logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç ASIC: {e}")
                break

class PoolConnector(threading.Thread):
    """–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å —Å –º–∞–π–Ω–∏–Ω–≥-–ø—É–ª–æ–º."""
    def __init__(self, server):
        super().__init__(daemon=True)
        self.server = server
        self.asic_socket = None
        self.pool_socket = None
        self.extranonce1 = None
        self.extranonce2_size = 0
        self.job_id = None
        self.difficulty = None
        self.authorized = False
        self.jobs = {}
        self.accepted_shares = 0
        self.rejected_shares = 0
        self.db_lock = Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è SQLite
        db_dir = os.path.dirname(DB_PATH)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir)
        self.conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        self.cur = self.conn.cursor()
        self._init_db()

    def _init_db(self):
        with self.db_lock:
            self.cur.execute("""
                CREATE TABLE IF NOT EXISTS submits (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    extranonce2 TEXT,
                    timestamp INTEGER
                )
            """)
            self.conn.commit()

    def run(self):
        while True:
            try:
                logger.info(f"[POOL] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—É–ª—É {POOL_HOST}:{POOL_PORT}...")  # –õ–æ–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                with socket.create_connection((POOL_HOST, POOL_PORT)) as s:
                    self.pool_socket = s
                    logger.info(f"[POOL] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {POOL_HOST}:{POOL_PORT}")
                    self._subscribe()
                    while True:
                        data = self._recv()
                        if data:
                            for message in self._split_messages(data):
                                try:
                                    self._handle_pool_message(json.loads(message))
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—É–ª–∞: {e}\n{message}")
                        else:
                            break
            except Exception as e:
                logger.error(f"[POOL] –û—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ø—É–ª–æ–º: {e}")
                time.sleep(5)

    def _recv(self):
        try:
            self.pool_socket.settimeout(30.0)
            buffer = ""
            while True:
                chunk = self.pool_socket.recv(4096).decode('utf-8')
                if not chunk:
                    break
                buffer += chunk
                if buffer.count('{') == buffer.count('}') and buffer.endswith('\n'):
                    break
            return buffer
        except socket.timeout:
            logger.warning("[RECV] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—É–ª–∞")
            return ''
        except Exception as e:
            logger.error(f"[RECV] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return ''

    def _split_messages(self, data):
        return data.strip().split('\n')

    def _send_to_pool(self, msg):
        if not self.pool_socket or self.pool_socket.fileno() == -1:
            logger.warning("[POOL] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—É–ª–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            self.pool_socket = None
            return
        try:
            message = json.dumps(msg) + '\n'
            self.pool_socket.sendall(message.encode('utf-8'))
            logger.debug(f"[POOL SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª: {msg}")
        except Exception as e:
            logger.error(f"[POOL SEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
            self.pool_socket = None

    def _send_to_asic(self, msg):
        if self.asic_socket and self.asic_socket.fileno() != -1:
            try:
                message = json.dumps(msg) + '\n'
                self.asic_socket.sendall(message.encode('utf-8'))
                logger.info(f"[SEND] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ASIC: {msg}")
            except Exception as e:
                logger.error(f"[SEND] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ ASIC: {e}")
                self._reconnect_asic()
        else:
            logger.warning("[SEND] ASIC-—Å–æ–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
            self._reconnect_asic()

    def _reconnect_asic(self):
        logger.warning("[RECONNECT] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ASIC...")
        try:
            if self.asic_socket and self.asic_socket.fileno() != -1:
                self.asic_socket.close()
            self.asic_socket = None
            while not self.asic_socket:
                if hasattr(self.server, 'asic_socket') and self.server.asic_socket.fileno() != -1:
                    self.asic_socket = self.server.asic_socket
                    logger.info("[RECONNECT] –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ASIC")
                    break
                time.sleep(1)
        except Exception as e:
            logger.error(f"[RECONNECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ ASIC: {e}")

    def _subscribe(self):
        self._send_to_pool({"id": 1, "method": "mining.subscribe", "params": []})
        self._send_to_pool({"id": 2, "method": "mining.authorize", "params": ["worker", "x"]})

    def _handle_pool_message(self, msg):
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—É–ª–∞: {msg}")
        if msg.get("method") == "mining.set_difficulty":
            self.difficulty = msg['params'][0]
        elif msg.get("method") == "mining.notify" and self.authorized:
            params = msg.get("params", [])
            if isinstance(params, list) and len(params) >= 8:
                self._handle_notify(params[:8])
            else:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç notify: {params}")
        elif msg.get("result") and isinstance(msg['result'], list):
            self.extranonce1 = msg['result'][1]
            self.extranonce2_size = msg['result'][2]
            logger.info(f"[EXTRANONCE1] –ü–æ–ª—É—á–µ–Ω: {self.extranonce1}, —Ä–∞–∑–º–µ—Ä: {self.extranonce2_size}")
        elif msg.get("id") == 2 and msg.get("result") is True:
            self.authorized = True
            logger.info("[POOL] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ø—É–ª–µ —É—Å–ø–µ—à–Ω–∞")
        elif "id" in msg and "method" not in msg and not isinstance(msg.get("result"), list):
            if msg.get("result") is True:
                self.accepted_shares += 1
                logger.info("[SHARE] –ü—Ä–∏–Ω—è—Ç–∞")
            else:
                self.rejected_shares += 1
                logger.info(f"[SHARE] –û—Ç–∫–ª–æ–Ω–µ–Ω–∞: {msg.get('error')}")

    def _handle_notify(self, params):
        try:
            job_id, coinb1, coinb2, merkle_branch, version, nbits, ntime, clean_jobs = params
            logger.debug(f"[RAW NOTIFY] job_id={job_id}, coinb1={coinb1}, coinb2={coinb2}, merkle_branch={merkle_branch}")
            coinb1 = fix_hex_string(coinb1)
            coinb2 = fix_hex_string(coinb2)
            extranonce2 = self._select_best_extranonce2(job_id)
            extranonce1 = fix_hex_string(self.extranonce1) if self.extranonce1 else "00"
            merkle_root = calculate_merkle_root(coinb1, coinb2, extranonce1, extranonce2, merkle_branch)
            logger.info(f"[FILTERED] job_id={job_id} ‚Üí best extranonce2: {extranonce2}")
            logger.info(f"[MERKLE ROOT] job_id={job_id} ‚Üí {merkle_root}")
            logger.info(f"[SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ASIC: job_id={job_id}")
            self._send_to_asic({
                "id": None,
                "method": "mining.set_difficulty",
                "params": [self.difficulty]
            })
            self._send_to_asic({
                "id": None,
                "method": "mining.notify",
                "params": [job_id, coinb1, coinb2, merkle_branch, version, nbits, ntime, clean_jobs]
            })
        except Exception as e:
            logger.error(f"[HANDLE NOTIFY] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ notify: {e}")

    def _select_best_extranonce2(self, job_id):
        candidates = [f"{i:08x}" for i in range(256)]
        weights = {}
        for ex2 in candidates:
            total = sum(hashlib.sha256(bytes.fromhex(ex2)).digest())
            weights[ex2] = total % (2**32)
        sorted_weights = sorted(weights.items(), key=lambda item: item[1])
        top = sorted_weights[-5:]
        for val, score in top:
            logger.info(f"  - {val} -> –≤–µ—Å: {score}")
        best = top[-1][0] if top else "00000000"
        return best

def fix_hex_string(s):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω—É—é —Å—Ç—Ä–æ–∫—É, –¥–æ–±–∞–≤–ª—è—è –≤–µ–¥—É—â–∏–π –Ω–æ–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    global last_hex_warning_time, hex_warning_shown
    current_time = time.time()
    if len(s) % 2 != 0:
        if not hex_warning_shown or (current_time - last_hex_warning_time >= 100):
            logger.warning(f"[HEX FIX] –°—Ç—Ä–æ–∫–∞ –Ω–µ—á—ë—Ç–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º 0: {s}")
            last_hex_warning_time = current_time
            hex_warning_shown = True
        s = '0' + s
    return s

def calculate_merkle_root(coinb1, coinb2, extranonce1, extranonce2, branches):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Ä–µ–Ω—å –ú–µ—Ä–∫–ª–∞ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞."""
    coinb1 = fix_hex_string(coinb1)
    coinb2 = fix_hex_string(coinb2)
    extranonce1 = fix_hex_string(extranonce1)
    extranonce2 = fix_hex_string(extranonce2)
    branches = [fix_hex_string(b) for b in branches]

    coinbase = coinb1 + extranonce1 + extranonce2 + coinb2
    logger.debug(f"[COINBASE RAW] {coinbase}")
    coinbase_bin = binascii.unhexlify(coinbase)
    coinbase_hash = hashlib.sha256(hashlib.sha256(coinbase_bin).digest()).digest()
    merkle_root = coinbase_hash
    for branch in branches:
        merkle_root = hashlib.sha256(hashlib.sha256(merkle_root + binascii.unhexlify(branch)).digest()).digest()
    return merkle_root.hex()

async def main_async():
    global server, proxy, telegram_handler
    logger.info("[STARTUP] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
    try:
        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞
        logger.info(f"[PORT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {ASIC_PROXY_PORT}...")
        await ensure_port_available(ASIC_PROXY_PORT)
        logger.info(f"[PORT] –ü–æ—Ä—Ç {ASIC_PROXY_PORT} –¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.info(f"[SERVER] –ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {ASIC_PROXY_HOST}:{ASIC_PROXY_PORT}...")
        server = ThreadedTCPServer((ASIC_PROXY_HOST, ASIC_PROXY_PORT), ASICHandler)
        proxy = PoolConnector(server)
        server.proxy = proxy
        proxy.start()
        threading.Thread(target=server.serve_forever, daemon=True).start()
        logger.info(f"[SERVER] –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {ASIC_PROXY_HOST}:{ASIC_PROXY_PORT}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        async def handle_status(request):
            return web.json_response({
                "version": VERSION,
                "accepted_shares": proxy.accepted_shares,
                "rejected_shares": proxy.rejected_shares,
                "connected": proxy.pool_socket is not None
            })

        async def handle_shutdown(request):
            telegram_handler.disable()
            logger.info("[TELEGRAM] –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ /shutdown")
            sys.exit(0)  
           
        app = web.Application()
        app.add_routes([
            web.get('/status', handle_status),
            web.get('/shutdown', handle_shutdown)
        ])
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        logger.info("[HTTP] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ event loop
        current_loop = asyncio.get_running_loop()
        telegram_handler = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, loop=current_loop)
        telegram_handler.setLevel(logging.DEBUG)
        telegram_handler.setFormatter(formatter)
        logger.addHandler(telegram_handler)

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        while True:
            await asyncio.sleep(3600)
    except Exception as e:
        logger.error(f"[MAIN] –û—à–∏–±–∫–∞ –≤ main_async: {e}")
        raise
    finally:
        logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
        if 'proxy' in globals() and proxy.conn:
            proxy.conn.close()
        if 'server' in globals():
            server.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main_async())
    except KeyboardInterrupt:
        logger.warning("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        try:
            telegram_handler.disable()  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telegram-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            logger.info("[TELEGRAM] –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ.")
            server.shutdown()
            logger.info("[SERVER] –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"[ERROR] –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(0)
        

        
        
        
        
