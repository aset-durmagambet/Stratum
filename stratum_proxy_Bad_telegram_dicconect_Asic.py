import socket
import threading
import json
import hashlib
import binascii
import logging
import time
import sqlite3
import os
import signal
import psutil
import requests
import sys

from socketserver import ThreadingMixIn, TCPServer, StreamRequestHandler
from http.server import BaseHTTPRequestHandler, HTTPServer
from logging.handlers import RotatingFileHandler

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
ASIC_PROXY_HOST = '0.0.0.0'
ASIC_PROXY_PORT = 3333
POOL_HOST = 'stratum.braiins.com'
POOL_PORT = 3333
VERSION = "1.0.0"

TELEGRAM_TOKEN = '7207281851:AAEzDaJmpvA6KB9xgTo7dnEbnW4LUtnH4FQ'
TELEGRAM_CHAT_ID = 480223056

LOG_DIR = "/root/Stratum/logs"
LOG_FILE = os.path.join(LOG_DIR, "stratum_proxy.log")
ERROR_LOG_FILE = os.path.join(LOG_DIR, "stratum_proxy_error.log")
DB_PATH = "/root/Stratum/submits.db"

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

file_formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
file_handler = RotatingFileHandler(LOG_FILE, maxBytes=10*1024*1024, backupCount=5)
file_handler.setFormatter(file_formatter)

error_handler = RotatingFileHandler(ERROR_LOG_FILE, maxBytes=5*1024*1024, backupCount=3)
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(file_formatter)

console_handler = logging.StreamHandler()
console_handler.setFormatter(file_formatter)

logger = logging.getLogger("stratum_proxy")
logger.setLevel(logging.DEBUG)
logger.addHandler(file_handler)
logger.addHandler(error_handler)
logger.addHandler(console_handler)

import logging

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram ===
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.token = token
        self.chat_id = chat_id
        self.url = f"https://api.telegram.org/bot{self.token}/sendMessage"

    def emit(self, record):
        try:
            msg = self.format(record)
            safe_msg = self._sanitize_text(msg)
            self._send(safe_msg)
        except Exception as e:
            print(f"[TelegramHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    def _send(self, text):
        try:
            response = requests.post(self.url, data={
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": "HTML"
            }, timeout=5)
            if response.status_code != 200:
                print(f"[TelegramHandler] –û—Ç–≤–µ—Ç Telegram: {response.status_code} ‚Äî {response.text}")
        except Exception as e:
            print(f"[TelegramHandler] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")

    def _sanitize_text(self, text):
        return text.encode("utf-8", "ignore").decode("utf-8", "ignore")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ASIC ===
class ASICHandler(StreamRequestHandler):
    def handle(self):
        logger.info(f"[ASIC] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {self.client_address[0]}")
        proxy.asic_socket = self.request
        asic_status["connected"] = True

        while True:
            try:
                data = self.request.recv(4096).decode('utf-8', errors='replace')
                if not data:
                    logger.warning("[ASIC] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                    asic_status["connected"] = False
                    break

                asic_status["last_message_time"] = time.strftime('%Y-%m-%d %H:%M:%S')
                asic_status["messages_received"] += 1

                try:
                    msg = json.loads(data)
                    method = msg.get("method")
                    asic_status["last_method"] = method

                    if method == "mining.submit":
                        proxy.pool_socket.sendall((json.dumps(msg) + "\n").encode())
                        logger.info(f"[SUBMIT] –û—Ç ASIC: {msg}")

                        job_id = msg.get("params", [None, None])[1]
                        extranonce2 = msg.get("params", [None, None, None])[2]
                        timestamp = int(time.time())
                        try:
                            proxy.cur.execute(
                                "INSERT INTO submits (job_id, extranonce2, timestamp, status) VALUES (?, ?, ?, ?)",
                                (job_id, extranonce2, timestamp, 'submitted')
                            )
                            proxy.conn.commit()
                            proxy.last_submit_id = proxy.cur.lastrowid
                        except Exception as e:
                            logger.error(f"[DB] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ submit: {e}")
                except Exception as e:
                    logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
                    asic_status["last_error"] = str(e)
            except Exception as e:
                logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                asic_status["connected"] = False
                asic_status["last_error"] = str(e)
                break

# –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TelegramHandler
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram
telegram_handler = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID)
telegram_handler.setLevel(logging.INFO)

formatter = logging.Formatter('[%(levelname)s] %(message)s')
telegram_handler.setFormatter(formatter)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –ª–æ–≥–≥–µ—Ä
logger.addHandler(telegram_handler)

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –∫–æ–¥–∞


# === Telegram polling-–∫–æ–º–∞–Ω–¥—ã ===
def poll_telegram_commands():
    last_update_id = 0
    while True:
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates?offset={last_update_id + 1}"
            response = requests.get(url, timeout=5)
            data = response.json()
            for result in data.get("result", []):
                message = result.get("message")
                if not message:
                    continue
                chat_id = message.get("chat", {}).get("id")
                if chat_id != TELEGRAM_CHAT_ID:
                    continue
                text = message.get("text", "").strip().lower()
                if text == "/status":
                    status_lines = [
                        "üü¢ ASIC –ø–æ–¥–∫–ª—é—á—ë–Ω" if asic_status["connected"] else "üî¥ ASIC –æ—Ç–∫–ª—é—á—ë–Ω",
                        f"üì® –ü–æ–ª—É—á–µ–Ω–æ: {asic_status['messages_received']}",
                        f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {asic_status['last_message_time'] or '‚Äî'}",
                        f"üß† –ú–µ—Ç–æ–¥: {asic_status['last_method'] or '‚Äî'}",
                        f"üî• –û—à–∏–±–∫–∞: {asic_status['last_error'] or '–ù–µ—Ç'}",
                        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–≤–∫–ª—é—á–µ–Ω—ã' if asic_status['alerts_enabled'] else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}",
                        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {getattr(proxy, 'accepted_shares', 0)} | ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {getattr(proxy, 'rejected_shares', 0)}"
                    ]
                    requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                        "chat_id": TELEGRAM_CHAT_ID,
                        "text": "\n".join(status_lines)
                    })
                elif text == "/alerts_off":
                    asic_status["alerts_enabled"] = False
                    requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                        "chat_id": TELEGRAM_CHAT_ID,
                        "text": "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
                    })
                elif text == "/alerts_on":
                    asic_status["alerts_enabled"] = True
                    requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                        "chat_id": TELEGRAM_CHAT_ID,
                        "text": "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã."
                    })
                elif text == "/restart_asic":
                    try:
                        if proxy.asic_socket:
                            proxy.asic_socket.close()
                            proxy.asic_socket = None
                        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                            "chat_id": TELEGRAM_CHAT_ID,
                            "text": "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ASIC –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω."
                        })
                    except Exception as e:
                        requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                            "chat_id": TELEGRAM_CHAT_ID,
                            "text": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ASIC: {e}"
                        })
                elif text == "/last_submit":
                    try:
                        proxy.cur.execute("SELECT job_id, extranonce2, timestamp, status FROM submits ORDER BY id DESC LIMIT 1")
                        row = proxy.cur.fetchone()
                        if row:
                            msg = (
                                f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π submit:\n"
                                f"Job ID: <code>{row[0]}</code>\n"
                                f"Extranonce2: <code>{row[1]}</code>\n"
                                f"Status: <b>{row[3]}</b>\n"
                                f"‚è± –í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(row[2]))}"
                            )
                            requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                                "chat_id": TELEGRAM_CHAT_ID,
                                "text": msg,
                                "parse_mode": "HTML"
                            })
                        else:
                            requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                                "chat_id": TELEGRAM_CHAT_ID,
                                "text": "‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ submit'–∞—Ö"
                            })
                    except Exception as e:
                        logger.error(f"[TELEGRAM] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /last_submit: {e}")
                last_update_id = result.get("update_id", last_update_id)
        except Exception as e:
            logger.warning(f"[TELEGRAM POLL] –û—à–∏–±–∫–∞: {e}")
        time.sleep(3)


threading.Thread(target=poll_telegram_commands, daemon=True).start()

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å ===
asic_status = {
    "connected": False,
    "last_message_time": None,
    "last_method": None,
    "messages_received": 0,
    "last_error": None,
    "alerts_enabled": True
}

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ ASIC –∏ —Å–∏—Å—Ç–µ–º—ã ===
def asic_status_watcher():
    prev_connected = None
    last_alert_time = 0
    alert_interval = 120

    while True:
        time.sleep(30)

        now_str = time.strftime('%Y-%m-%d %H:%M:%S')
        now_ts = time.time()
        last_msg_time_str = asic_status.get("last_message_time")
        last_msg_ts = None

        try:
            last_msg_ts = time.mktime(time.strptime(last_msg_time_str, '%Y-%m-%d %H:%M:%S'))
        except:
            pass

        connected = asic_status.get("connected", False)
        alerts_on = asic_status.get("alerts_enabled", True)

        if alerts_on:
            if prev_connected is True and connected is False:
                requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                    "chat_id": TELEGRAM_CHAT_ID,
                    "text": f"üî¥ ASIC –æ—Ç–∫–ª—é—á–∏–ª—Å—è –≤ {now_str}"
                })
                logger.warning("[ALERT] ASIC –æ—Ç–∫–ª—é—á–∏–ª—Å—è")

            if prev_connected is False and connected is True:
                requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                    "chat_id": TELEGRAM_CHAT_ID,
                    "text": f"üü¢ ASIC —Å–Ω–æ–≤–∞ –ø–æ–¥–∫–ª—é—á—ë–Ω –≤ {now_str}"
                })
                logger.info("[ALERT] ASIC –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")

            if connected and last_msg_ts and now_ts - last_msg_ts > alert_interval:
                if now_ts - last_alert_time > alert_interval:
                    last_alert_time = now_ts
                    requests.post(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage", data={
                        "chat_id": TELEGRAM_CHAT_ID,
                        "text": f"‚è± ASIC –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª–µ–µ {(now_ts - last_msg_ts)//60:.0f} –º–∏–Ω (last: {last_msg_time_str})"
                    })
                    logger.warning("[ALERT] ASIC –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –¥–∞–Ω–Ω—ã–µ")

        prev_connected = connected

threading.Thread(target=asic_status_watcher, daemon=True).start()
asic_status = {
    "connected": False,
    "last_message_time": None,
    "last_method": None,
    "messages_received": 0,
    "last_error": None
}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def fix_hex_string(s):
    return '0' + s if len(s) % 2 else s

def calculate_merkle_root(coinb1, coinb2, extranonce1, extranonce2, branches):
    coinbase = binascii.unhexlify(coinb1 + extranonce1 + extranonce2 + coinb2)
    coinbase_hash = hashlib.sha256(hashlib.sha256(coinbase).digest()).digest()
    merkle_root = coinbase_hash
    for branch in branches:
        merkle_root = hashlib.sha256(hashlib.sha256(merkle_root + binascii.unhexlify(fix_hex_string(branch))).digest()).digest()
    return merkle_root[::-1].hex()

def select_best_extranonce2(size):
    candidates = [f"{i:0{size * 2}x}" for i in range(256)]
    weights = {val: sum(hashlib.sha256(bytes.fromhex(val)).digest()) for val in candidates}
    return sorted(weights.items(), key=lambda x: x[1])[-1][0]

# === –ü—Ä–æ–∫—Å–∏-–∑–∞–≥–ª—É—à–∫–∞ ===
class DummyProxy:
    def __init__(self):
        self.asic_socket = None
        self.pool_socket = None
        self.accepted_shares = 0
        self.rejected_shares = 0
        self.conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        self.cur = self.conn.cursor()
        self.cur.execute("""
            CREATE TABLE IF NOT EXISTS submits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                job_id TEXT,
                extranonce2 TEXT,
                timestamp INTEGER,
                status TEXT
            )
        """)
        self.conn.commit()
        self.last_submit_id = None

proxy = DummyProxy()

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ASIC ===
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.token = token
        self.chat_id = chat_id
        self.url = f"https://api.telegram.org/bot{self.token}/sendMessage"

    def emit(self, record):
        try:
            msg = self.format(record)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ —Ä–∞–∑—Ä—ã–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è), –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ Telegram
            if "[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: [Errno 104]" in msg:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–∞–∫–∏–µ –æ—à–∏–±–∫–∏

            safe_msg = self._sanitize_text(msg)
            self._send(safe_msg)
        except Exception as e:
            print(f"[TelegramHandler] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

    def _send(self, text):
        try:
            response = requests.post(self.url, data={
                "chat_id": self.chat_id,
                "text": text,
                "parse_mode": "HTML"
            }, timeout=5)
            if response.status_code != 200:
                print(f"[TelegramHandler] –û—Ç–≤–µ—Ç Telegram: {response.status_code} ‚Äî {response.text}")
        except Exception as e:
            print(f"[TelegramHandler] –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")

    def _sanitize_text(self, text):
        return text.encode("utf-8", "ignore").decode("utf-8", "ignore")
    def handle(self):
        logger.info(f"[ASIC] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {self.client_address[0]}")
        proxy.asic_socket = self.request
        asic_status["connected"] = True

        while True:
            try:
                data = self.request.recv(4096).decode('utf-8', errors='replace')
                if not data:
                    logger.warning("[ASIC] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                    asic_status["connected"] = False
                    break

                asic_status["last_message_time"] = time.strftime('%Y-%m-%d %H:%M:%S')
                asic_status["messages_received"] += 1

                try:
                    msg = json.loads(data)
                    method = msg.get("method")
                    asic_status["last_method"] = method

                    if method == "mining.submit":
                        proxy.pool_socket.sendall((json.dumps(msg) + "\n").encode())
                        logger.info(f"[SUBMIT] –û—Ç ASIC: {msg}")

                        job_id = msg.get("params", [None, None])[1]
                        extranonce2 = msg.get("params", [None, None, None])[2]
                        timestamp = int(time.time())
                        try:
                            proxy.cur.execute(
                                "INSERT INTO submits (job_id, extranonce2, timestamp, status) VALUES (?, ?, ?, ?)",
                                (job_id, extranonce2, timestamp, 'submitted')
                            )
                            proxy.conn.commit()
                            proxy.last_submit_id = proxy.cur.lastrowid
                        except Exception as e:
                            logger.error(f"[DB] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ submit: {e}")
                except Exception as e:
                    logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
                    asic_status["last_error"] = str(e)
            except ConnectionResetError as e:
                logger.warning(f"[ASIC] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e} ‚Äî –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                time.sleep(5)  # –ñ–¥—ë–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                try:
                    self.request.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    proxy.asic_socket = None  # –û–±–Ω—É–ª—è–µ–º —Å–æ–∫–µ—Ç
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ASIC –∏–ª–∏ –ø—É–ª—É
                except Exception as close_e:
                    logger.error(f"[ASIC] –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–∫–µ—Ç–∞: {close_e}")
            except Exception as e:
                logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                asic_status["connected"] = False
                asic_status["last_error"] = str(e)
                break
    def handle(self):
        logger.info(f"[ASIC] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {self.client_address[0]}")
        proxy.asic_socket = self.request
        asic_status["connected"] = True

        while True:
            try:
                data = self.request.recv(4096).decode('utf-8', errors='replace')
                if not data:
                    logger.warning("[ASIC] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                    asic_status["connected"] = False
                    break

                asic_status["last_message_time"] = time.strftime('%Y-%m-%d %H:%M:%S')
                asic_status["messages_received"] += 1

                try:
                    msg = json.loads(data)
                    method = msg.get("method")
                    asic_status["last_method"] = method

                    if method == "mining.submit":
                        proxy.pool_socket.sendall((json.dumps(msg) + "\n").encode())
                        logger.info(f"[SUBMIT] –û—Ç ASIC: {msg}")

                        job_id = msg.get("params", [None, None])[1]
                        extranonce2 = msg.get("params", [None, None, None])[2]
                        timestamp = int(time.time())
                        try:
                            proxy.cur.execute(
                                "INSERT INTO submits (job_id, extranonce2, timestamp, status) VALUES (?, ?, ?, ?)",
                                (job_id, extranonce2, timestamp, 'submitted')
                            )
                            proxy.conn.commit()
                            proxy.last_submit_id = proxy.cur.lastrowid
                        except Exception as e:
                            logger.error(f"[DB] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ submit: {e}")
                except Exception as e:
                    logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
                    asic_status["last_error"] = str(e)
            except Exception as e:
                logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
                asic_status["connected"] = False
                asic_status["last_error"] = str(e)
                break


# === PoolConnector ===
class PoolConnector(threading.Thread):
    def _split_messages(self, data):
        return [msg for msg in data.strip().split('\n') if msg]

    def __init__(self):
        super().__init__(daemon=True)
        self.extranonce1 = None
        self.extranonce2_size = 0
        self.difficulty = None
        self.authorized = False

    def run(self):
        while True:
            try:
                with socket.create_connection((POOL_HOST, POOL_PORT)) as s:
                    proxy.pool_socket = s
                    logger.info(f"[POOL] –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {POOL_HOST}:{POOL_PORT}")
                    self._subscribe()
                    while True:
                        buffer = ""
                        while True:
                            chunk = s.recv(4096).decode('utf-8')
                            if not chunk:
                                raise ConnectionError("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –ø—É–ª–æ–º")
                            buffer += chunk
                            if buffer.endswith('\n'):
                                break
                        for line in self._split_messages(buffer):
                            self._handle_pool_message(json.loads(line))
                    while True:
                        data = s.recv(4096).decode('utf-8')
                        buffer = ""
                        while True:
                            chunk = s.recv(4096).decode('utf-8')
                            if not chunk:
                                break
                            buffer += chunk
                            if buffer.endswith('\n'):
                                break
                        lines = buffer.strip().split('\n')
                        for line in lines:
                            self._handle_pool_message(json.loads(line))
            except Exception as e:
                logger.error(f"[POOL] –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)

    def _subscribe(self):
        self._send({"id": 1, "method": "mining.subscribe", "params": []})
        self._send({"id": 2, "method": "mining.authorize", "params": ["worker", "x"]})

    def _send(self, msg):
        if proxy.pool_socket:
            proxy.pool_socket.sendall((json.dumps(msg) + '\n').encode())

    def _send_to_asic(self, msg):
     if proxy.asic_socket:
        try:
            proxy.asic_socket.sendall((json.dumps(msg) + "\n").encode())
        except Exception as e:
            logger.error(f"[SEND ASIC] –û—à–∏–±–∫–∞: {e}")

    def _handle_pool_message(self, msg):
        if msg.get("method") == "mining.set_difficulty":
            self.difficulty = msg['params'][0]
        elif msg.get("method") == "mining.notify" and self.authorized:
            params = msg.get("params", [])
            if len(params) >= 8:
                job_id, coinb1, coinb2, merkle_branch, version, nbits, ntime, clean_jobs = params[:8]
                extranonce2 = select_best_extranonce2(self.extranonce2_size)
                merkle_root = calculate_merkle_root(coinb1, coinb2, self.extranonce1, extranonce2, merkle_branch)
                logger.info(f"[FILTER] extranonce2: {extranonce2}, Merkle: {merkle_root}")
                self._send_to_asic({"id": None, "method": "mining.set_difficulty", "params": [self.difficulty]})
                self._send_to_asic({"id": None, "method": "mining.notify", "params": params})
        elif msg.get("result") and isinstance(msg['result'], list):
            self.extranonce1 = msg['result'][1]
            self.extranonce2_size = msg['result'][2]
            logger.info(f"[POOL] extranonce1: {self.extranonce1}, size: {self.extranonce2_size}")
        elif msg.get("id") == 2 and msg.get("result") is True:
            self.authorized = True
            logger.info("[POOL] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        elif msg.get("id") and "method" not in msg:
            status = 'accepted' if msg.get("result") is True else 'rejected'
            try:
                if proxy.last_submit_id:
                    proxy.cur.execute("UPDATE submits SET status = ? WHERE id = ?", (status, proxy.last_submit_id))
                    proxy.conn.commit()
                    if status == 'accepted':
                        proxy.accepted_shares += 1
                    else:
                        proxy.rejected_shares += 1
            except Exception as e:
                logger.error(f"[DB] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è submit: {e}")

# === REST API ===
class RESTHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        from urllib.parse import urlparse, parse_qs
        parsed = urlparse(self.path)
        token = parse_qs(parsed.query).get('token', [''])[0]
        if token != 'admin123':
            self.send_response(403)
            self.end_headers()
            return

        if parsed.path == '/api/status':
            self._respond_json(asic_status)
        elif parsed.path == '/api/logs':
            with sqlite3.connect(DB_PATH) as db:
                cur = db.cursor()
                cur.execute("SELECT id, job_id, extranonce2, timestamp, status FROM submits ORDER BY id DESC LIMIT 100")
                logs = [dict(id=r[0], job_id=r[1], extranonce2=r[2], timestamp=r[3], status=r[4]) for r in cur.fetchall()]
                self._respond_json(logs)
        elif parsed.path == '/':
            html = f"<html><body><h2>ASIC: {'üü¢' if asic_status['connected'] else 'üî¥'}</h2></body></html>"
            self._respond_html(html)
        else:
            self.send_response(404)
            self.end_headers()

    def _respond_json(self, obj):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(obj).encode())

    def _respond_html(self, html):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(html.encode())

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ ===
def ensure_port_available(port):
    for conn in psutil.net_connections():
        if conn.laddr.port == port:
            try:
                proc = psutil.Process(conn.pid)
                logger.warning(f"[PORT IN USE] –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å PID={conn.pid}, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç :{port}")
                proc.terminate()
                proc.wait(timeout=3)
                time.sleep(2)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            break
    while any(p.laddr.port == port for p in psutil.net_connections()):
        time.sleep(1)

# === –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ASIC ===
def wait_for_asic():
    while proxy.asic_socket is None:
        logger.info("[WAIT] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ASIC...")
        time.sleep(5)
    logger.info("[WAIT] ASIC –ø–æ–¥–∫–ª—é—á—ë–Ω!")

# === –°–∏–≥–Ω–∞–ª—ã –∏ –∑–∞–ø—É—Å–∫ ===
def signal_handler(sig, frame):
    logger.info("[SHUTDOWN] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —Å–∏–≥–Ω–∞–ª—É")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

if __name__ == '__main__':
    ensure_port_available(ASIC_PROXY_PORT)
    api_server = HTTPServer(('0.0.0.0', 8080), RESTHandler)
    threading.Thread(target=api_server.serve_forever, daemon=True).start()
    logger.info("[SERVER] API –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

    proxy_server = TCPServer((ASIC_PROXY_HOST, ASIC_PROXY_PORT), ASICHandler)
    threading.Thread(target=proxy_server.serve_forever, daemon=True).start()
    logger.info("[SERVER] –°—Ç–∞—Ä—Ç Stratum proxy")

    pool_thread = PoolConnector()
    pool_thread.start()

    threading.Thread(target=wait_for_asic, daemon=True).start()

    while True:
        time.sleep(60)
