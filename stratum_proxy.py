import asyncio
import socket
import threading
from threading import Thread
import json
import hashlib
import binascii
import logging
from logging.handlers import RotatingFileHandler
import time
import sqlite3
import os
import signal
import sys
import psutil
import aiohttp
from aiohttp import web
from socketserver import ThreadingMixIn, TCPServer, StreamRequestHandler
from threading import Lock
from contextlib import contextmanager
import asyncio
import socket
import threading
from threading import Thread
import json
import hashlib
import binascii
import logging
from logging.handlers import RotatingFileHandler
import time
import sqlite3
import os
import signal
import sys
import psutil
import aiohttp
from aiohttp import web
from socketserver import ThreadingMixIn, TCPServer, StreamRequestHandler
from threading import Lock
from contextlib import contextmanager

print("‚úÖ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:", os.listdir())

LOG_FILE = "/root/Stratum/asic_proxy.log"

# –°–æ–∑–¥–∞—ë–º –ª–æ–≥-—Ñ–∞–π–ª, –µ—Å–ª–∏ –ø–∞–ø–∫–∏ –Ω–µ—Ç
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with open(LOG_FILE, "w") as f:
    f.write("")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ASICProxy")
logger.setLevel(logging.DEBUG)

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
if logger.hasHandlers():
    logger.handlers.clear()

handler = RotatingFileHandler(LOG_FILE, maxBytes=10 * 1024 * 1024, backupCount=5)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

# –û—Ç–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ stderr
logger.propagate = False

logger.info("üöÄ –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω.")

try:
    if os.path.exists("asic_proxy.db"):
        os.remove("asic_proxy.db")
        logger.info("[CLEANUP] –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: asic_proxy.db")
except Exception as e:
    logger.error(f"[CLEANUP ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞ ‚Äî —è–≤–Ω–æ
POOL_HOST = "stratum.braiins.com"
POOL_PORT = 3333
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è ASIC
ASIC_PROXY_HOST = "0.0.0.0"
ASIC_PROXY_PORT = 3333

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "asic_proxy.db"

# –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
VERSION = "1.0.0"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7207281851:AAEzDaJmpvA6KB9xgTo7dnEbnW4LUtnH4FQ")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "480223056")
# –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
ENABLE_TELEGRAM = False
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞


from logging.handlers import RotatingFileHandler

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
log_file_path = "asic_proxy.log"

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
with open(log_file_path, "w") as f:
    f.write("")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("ASICProxy")
logger.setLevel(logging.DEBUG)  # –∏–ª–∏ INFO, –µ—Å–ª–∏ –ª–æ–≥–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
if logger.hasHandlers():
    logger.handlers.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
handler = RotatingFileHandler(log_file_path, maxBytes=10*1024*1024, backupCount=5)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)
logger.addHandler(handler)

logger.info("–õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –§–∞–π–ª –æ—á–∏—â–µ–Ω.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è fix_hex_string
last_hex_warning_time = 0
hex_warning_shown = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
shutdown_event = asyncio.Event()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
def handle_shutdown(signum, frame):
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C –∏–ª–∏ SIGTERM), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    shutdown_event.set()
    if 'server' in globals():
        server.shutdown()
    if 'proxy' in globals():
        proxy.stop()

signal.signal(signal.SIGTERM, handle_shutdown)
signal.signal(signal.SIGINT, handle_shutdown)

async def ensure_port_available(port: int):
    """–û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç, –∑–∞–≤–µ—Ä—à–∞—è –ø—Ä–æ—Ü–µ—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç."""
    logger.info(f"[PORT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {port}...")
    processed_pids = set()
    port_in_use_initial = any(p.laddr.port == port for p in psutil.net_connections(kind='inet'))
    if not port_in_use_initial:
        logger.info(f"[PORT] –ü–æ—Ä—Ç {port} —É–∂–µ —Å–≤–æ–±–æ–¥–µ–Ω.")
        return
    for conn in psutil.net_connections(kind='inet'):
        if conn.laddr.port == port and conn.pid and conn.pid not in processed_pids:
            try:
                proc = psutil.Process(conn.pid)
                logger.info(f"[PORT IN USE] –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å PID={conn.pid}, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø–æ—Ä—Ç :{port}")
                proc.terminate()
                try:
                    proc.wait(timeout=5)
                except psutil.TimeoutExpired:
                    logger.warning(f"[PORT] –ü—Ä–æ—Ü–µ—Å—Å PID={conn.pid} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º...")
                    proc.kill()
                processed_pids.add(conn.pid)
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ PID={conn.pid}: {e}")
    timeout = 30
    start_time = time.time()
    while time.time() - start_time < timeout:
        port_in_use = any(p.laddr.port == port for p in psutil.net_connections(kind='inet'))
        if not port_in_use:
            logger.info(f"[PORT] –ü–æ—Ä—Ç {port} –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è.")
            return
        await asyncio.sleep(0.5)
    logger.error(f"[PORT] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port} –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–æ—Ä—Ç {port}")
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id, loop):
        super().__init__()
        self.token = token
        self.chat_id = chat_id
        self.loop = loop
        self.enabled = False  # üî¥ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ

    def emit(self, record):
        if not self.enabled:
            return  # ‚ö† –ù–µ–∞–∫—Ç–∏–≤–Ω–æ ‚Äî –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º

        try:
            log_entry = self.format(record)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π event loop
            if not self.loop or self.loop.is_closed():
                print("[TelegramHandler] –ü—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî event loop –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                return

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            asyncio.run_coroutine_threadsafe(self.send_telegram(log_entry), self.loop)
        except Exception as e:
            print(f"[TelegramHandler] –û—à–∏–±–∫–∞ –≤ emit: {e}")  # –∏–∑–±–µ–≥–∞–µ–º –ª–æ–≥–≥–µ—Ä–∞!

    async def send_telegram(self, message):
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        payload = {
            "chat_id": self.chat_id,
            "text": message,
        }
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=payload) as resp:
                    if resp.status != 200:
                        print(f"[TelegramHandler] Telegram error: {await resp.text()}")
        except Exception as e:
            print(f"[TelegramHandler] Telegram send failed: {e}")

    def enable(self):
        self.enabled = True

    def disable(self):
        self.enabled = False

class ThreadedTCPServer(ThreadingMixIn, TCPServer):
    allow_reuse_address = True

class ASICHandler(StreamRequestHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –æ—Ç ASIC-—É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    def handle(self):
        logger.info(f"[ASIC] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {self.client_address[0]}")
        self.server.asic_socket = self.request
        while True:
            try:
                data = self.request.recv(4096).decode('utf-8')
                if data:
                    logger.debug(f"[ASIC DATA] –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ASIC: {data}")
                    try:
                        msg = json.loads(data)
                        if not isinstance(msg, dict) or "id" not in msg:
                            logger.error(f"[ASIC] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")
                            continue
                        if msg.get("method") == "mining.configure":
                            response = {
                                "id": msg["id"],
                                "result": {"version-rolling": True},
                                "error": None
                            }
                            self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                            logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ mining.configure: {response}")
                            asyncio.run_coroutine_threadsafe(
                                self.server.proxy._send_to_pool({
                                    "method": "mining.configure",
                                    "params": ["version-rolling"]
                                }),
                                self.server.proxy.loop
                            )
                        elif msg.get("method") == "mining.subscribe":
                            logger.info("[ASIC] –ü–æ–ª—É—á–µ–Ω mining.subscribe")
                            try:
                                # Run the coroutine in the event loop and get the result
                                future = asyncio.run_coroutine_threadsafe(
                                    self.server.proxy._send_to_pool({
                                        "method": "mining.subscribe",
                                        "params": ["ASICProxy/1.0.0"]
                                    }),
                                    self.server.proxy.loop
                                )
                                # Wait for the result synchronously with a timeout
                                result = future.result(timeout=5)
                                
                                if not self.server.proxy.extranonce1 or not self.server.proxy.extranonce2_size:
                                    logger.error("[ASIC] –ù–µ –ø–æ–ª—É—á–µ–Ω extranonce1 –æ—Ç –ø—É–ª–∞")
                                    response = {
                                        "id": msg["id"],
                                        "result": None,
                                        "error": "Failed to receive extranonce from pool"
                                    }
                                    self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                                    return
                                response = {
                                    "id": msg["id"],
                                    "result": [["mining.notify", "ae6812eb4cd7735a"]],
                                    "extranonce1": self.server.proxy.extranonce1,
                                    "extranonce2_size": self.server.proxy.extranonce2_size
                                }
                                self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                                logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ mining.subscribe: {response}")
                                asyncio.run_coroutine_threadsafe(
                                    self.server.proxy._send_to_pool({
                                        "method": "mining.authorize",
                                        "params": ["AssetDurmagambet.worker1", "x"]
                                    }),
                                    self.server.proxy.loop
                                )
                            except TimeoutError:
                                logger.error("[ASIC] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ mining.subscribe")
                                response = {
                                    "id": msg["id"],
                                    "result": None,
                                    "error": "Timeout waiting for pool response"
                                }
                                self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                                return
                            except Exception as e:
                                logger.error(f"[ASIC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ mining.subscribe: {e}")
                                response = {
                                    "id": msg["id"],
                                    "result": None,
                                    "error": f"Failed to process subscribe: {e}"
                                }
                                self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                                return
                        elif msg.get("method") == "mining.authorize":
                            if hasattr(self.server, 'proxy'):
                                asyncio.run_coroutine_threadsafe(self.server.proxy._send_to_pool(msg), self.server.proxy.loop)
                                response = {"id": msg["id"], "result": True, "error": None}
                                self.request.sendall((json.dumps(response) + '\n').encode('utf-8'))
                                logger.info(f"[ASIC] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ mining.authorize: {response}")
                                self.server.proxy.authorized = True
                        elif msg.get("method") == "mining.submit" and hasattr(self.server, 'proxy'):
                            asyncio.run_coroutine_threadsafe(self.server.proxy._send_to_pool(msg), self.server.proxy.loop)
                            logger.info(f"[ASIC] –®–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø—É–ª–∞: {msg}")
                        elif hasattr(self.server, 'proxy'):
                            asyncio.run_coroutine_threadsafe(self.server.proxy._send_to_pool(msg), self.server.proxy.loop)
                    except json.JSONDecodeError:
                        logger.error(f"[ASIC DATA] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç ASIC: {data}")
                else:
                    logger.warning("[ASIC] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ASIC —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                    break
            except Exception as e:
                logger.error(f"[ASIC] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç ASIC: {e}")
                break

class PoolConnector(Thread):
    """–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å —Å –º–∞–π–Ω–∏–Ω–≥-–ø—É–ª–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –ø—É–ª–∞ –∏ ASIC."""
    def __init__(self, server):
        super().__init__(daemon=True)
        self.server = server
        self.asic_socket = None
        self.pool_socket = None
        self.extranonce1 = None
        self.extranonce2_size = 0
        self.job_id = None
        self.difficulty = None
        self.authorized = False
        self.jobs = {}
        self.accepted_shares = 0
        self.rejected_shares = 0
        self.db_lock = Lock()
        self.conn = sqlite3.connect(DB_PATH, check_same_thread=False)
        self.cur = self.conn.cursor()
        self._init_db()
        self.pool_queue = asyncio.Queue()
        self.asic_queue = asyncio.Queue()
        self.running = True
        self.loop = asyncio.new_event_loop()
        self.request_id = 0
        self.pending_requests = {}

    def _get_unique_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ø—É–ª—É."""
        self.request_id += 1
        return self.request_id

    @contextmanager
    def get_db(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å SQLite."""
        with self.db_lock:
            try:
                yield self.conn
                self.conn.commit()
            except Exception as e:
                logger.error(f"[DB] –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.conn.rollback()
                raise

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        with self.get_db() as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS submits (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    extranonce2 TEXT,
                    timestamp INTEGER
                )
            """)

    def run(self):
        asyncio.set_event_loop(self.loop)
        try:
            self.loop.run_until_complete(self._run_async())
        except Exception as e:
            logger.error(f"[POOL] –û—à–∏–±–∫–∞ –≤ run: {e}")
        finally:
            self._cleanup_loop()

    def _cleanup_loop(self):
        """–û—á–∏—Å—Ç–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞."""
        if not self.loop.is_closed():
            for task in asyncio.all_tasks(self.loop):
                task.cancel()
            try:
                self.loop.run_until_complete(self.loop.shutdown_asyncgens())
            except Exception as e:
                logger.error(f"[POOL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ loop: {e}")
            self.loop.close()

    async def wait_for_extranonce(self, timeout=5):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è extranonce –æ—Ç –ø—É–ª–∞."""
        try:
            await asyncio.sleep(0)
            for _ in range(int(timeout / 0.1)):
                if self.extranonce1 and self.extranonce2_size:
                    return True
                await asyncio.sleep(0.1)
            logger.error("[POOL] –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è extranonce")
            return False
        except Exception as e:
            logger.error(f"[POOL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ extranonce: {e}")
            return False

    async def _run_async(self):
        fallback_hosts = [(POOL_HOST, POOL_PORT), ("stratum.braiins.com", POOL_PORT)]
        while self.running and not shutdown_event.is_set():
            for host, port in fallback_hosts:
                try:
                    logger.info(f"[POOL] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—É–ª—É {host}:{port}...")
                    with socket.create_connection((host, port), timeout=5) as s:
                        self.pool_socket = s
                        self.pool_socket.settimeout(5.0)
                        logger.info(f"[POOL] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port} —É—Å–ø–µ—à–Ω–æ")
                        await self._subscribe()
                        await asyncio.gather(
                            self._read_pool_messages(),
                            self._process_pool_queue(),
                            self._process_asic_queue(),
                            self._keep_alive()
                        )
                    break
                except Exception as e:
                    logger.error(f"[POOL] –û—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ø—É–ª–æ–º {host}:{port}: {e}")
                    self.pool_socket = None
                    await asyncio.sleep(5)
                finally:
                    if self.pool_socket:
                        self.pool_socket.close()
                        self.pool_socket = None
            if shutdown_event.is_set():
                break

    async def _keep_alive(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ keep-alive —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        while self.running and self.pool_socket:
            try:
                await self._send_to_pool({"method": "mining.ping", "params": []})
                await asyncio.sleep(10 if not self.authorized else 30)
            except Exception as e:
                logger.error(f"[KEEP ALIVE] –û—à–∏–±–∫–∞: {e}")
                break

    async def _read_pool_messages(self):
        while self.running and self.pool_socket and not shutdown_event.is_set():
            try:
                buffer = ""
                while True:
                    chunk = self.pool_socket.recv(4096).decode('utf-8')
                    if not chunk:
                        break
                    buffer += chunk
                    if buffer.count('{') == buffer.count('}') and buffer.endswith('\n'):
                        break
                if buffer:
                    for message in self._split_messages(buffer):
                        try:
                            self._handle_pool_message(json.loads(message))
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—É–ª–∞: {e}\n{message}")
                else:
                    logger.warning("[POOL] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø—É–ª–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
                    break
            except socket.timeout:
                logger.warning("[RECV] –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—É–ª–∞")
                continue
            except Exception as e:
                logger.error(f"[RECV] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                break
        self.pool_socket = None

    async def _process_pool_queue(self):
        while self.running and not shutdown_event.is_set():
            try:
                if self.pool_queue.qsize() > 100:
                    logger.warning("[POOL QUEUE] –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
                msg = await self.pool_queue.get()
                if not self.pool_socket or self.pool_socket.fileno() == -1:
                    logger.warning("[POOL] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...")
                    self.pool_queue.put_nowait(msg)
                    break
                if msg.get("method") not in ["mining.subscribe", "mining.authorize", "mining.configure", "mining.ping"] and not self.authorized:
                    logger.warning("[POOL] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    self.pool_queue.put_nowait(msg)
                    await asyncio.sleep(1)
                    continue
                try:
                    message = self._prepare_message(msg)
                    self.pool_socket.sendall(message.encode('utf-8'))
                    logger.debug(f"[POOL SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø—É–ª: {msg}")
                except Exception as e:
                    logger.error(f"[POOL SEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    self.pool_queue.put_nowait(msg)
                    self.pool_socket = None
                    break
                finally:
                    self.pool_queue.task_done()
            except Exception as e:
                logger.error(f"[POOL QUEUE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
                await asyncio.sleep(1)

    async def _process_asic_queue(self):
        while self.running and not shutdown_event.is_set():
            try:
                if self.asic_queue.qsize() > 100:
                    logger.warning("[ASIC QUEUE] –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞")
                msg = await self.asic_queue.get()
                if not self.asic_socket or self.asic_socket.fileno() == -1:
                    logger.warning("[ASIC] ASIC-—Å–æ–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    self.asic_queue.put_nowait(msg)
                    self._reconnect_asic()
                    await asyncio.sleep(1)
                    continue
                try:
                    message = self._prepare_message(msg)
                    self.asic_socket.sendall(message.encode('utf-8'))
                    logger.debug(f"[ASIC SEND] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ ASIC: {msg}")
                except Exception as e:
                    logger.error(f"[ASIC SEND] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    self.asic_queue.put_nowait(msg)
                    self._reconnect_asic()
                finally:
                    self.asic_queue.task_done()
            except Exception as e:
                logger.error(f"[ASIC QUEUE] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
                await asyncio.sleep(1)

    def _prepare_message(self, msg):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ."""
        if not isinstance(msg, dict):
            raise ValueError(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º: {msg}")
        try:
            return json.dumps(msg, ensure_ascii=False) + '\n'
        except ValueError as e:
            logger.error(f"[JSON] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {msg}, –æ—à–∏–±–∫–∞: {e}")
            raise

    def _split_messages(self, data):
        return data.strip().split('\n')

    async def _send_to_pool(self, msg):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø—É–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Future –¥–ª—è –æ—Ç–≤–µ—Ç–∞."""
        original_id = msg.get("id")
        msg["id"] = self._get_unique_id()
        future = asyncio.Future()
        self.pending_requests[msg["id"]] = {"original_id": original_id, "method": msg.get("method"), "future": future}
        await self.pool_queue.put(msg)
        logger.debug(f"[POOL QUEUE] –î–æ–±–∞–≤–ª–µ–Ω–æ: {msg}, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID: {original_id}")
        return future

    def _send_to_asic(self, msg):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ASIC."""
        asyncio.run_coroutine_threadsafe(self.asic_queue.put(msg), self.loop)
        logger.debug(f"[ASIC QUEUE] –î–æ–±–∞–≤–ª–µ–Ω–æ: {msg}")

    def _reconnect_asic(self):
        logger.warning("[RECONNECT] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ASIC...")
        try:
            if self.asic_socket and self.asic_socket.fileno() != -1:
                self.asic_socket.close()
            self.asic_socket = None
            while not self.asic_socket and self.running and not shutdown_event.is_set():
                if hasattr(self.server, 'asic_socket') and self.server.asic_socket.fileno() != -1:
                    self.asic_socket = self.server.asic_socket
                    logger.info("[RECONNECT] –£—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ASIC")
                    break
                time.sleep(1)
        except Exception as e:
            logger.error(f"[RECONNECT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ ASIC: {e}")

    async def _subscribe(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        await self._send_to_pool({"method": "mining.configure", "params": ["version-rolling"]})
        await self._send_to_pool({"method": "mining.subscribe", "params": ["ASICProxy/1.0.0"]})
        await self._send_to_pool({"method": "mining.authorize", "params": ["AssetDurmagambet.worker1", "x"]})

    def _handle_pool_message(self, msg):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—É–ª–∞."""
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—É–ª–∞: {msg}")
        msg_id = msg.get("id")
        request_info = self.pending_requests.pop(msg_id, None) if msg_id else None
        if request_info and "future" in request_info:
            future = request_info["future"]
        else:
            future = None
        if "error" in msg and msg["error"] is not None:
            logger.error(f"[POOL] –û—à–∏–±–∫–∞: {msg['error']}, –∑–∞–ø—Ä–æ—Å: {request_info}")
            if future and not future.done():
                future.set_exception(Exception(f"Pool error: {msg['error']}"))
            return
        if msg.get("method") == "mining.set_difficulty":
            self.difficulty = msg['params'][0]
            self._send_to_asic({
                "id": None,
                "method": "mining.set_difficulty",
                "params": [self.difficulty]
            })
        elif msg.get("method") == "mining.notify" and self.authorized:
            params = msg.get("params", [])
            if len(params) < 8:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç notify: {params}")
                return
            self._handle_notify(params)
        elif msg.get("result") and isinstance(msg['result'], list) and request_info and request_info.get("method") == "mining.subscribe":
            if len(msg['result']) < 3 or not isinstance(msg['result'][1], str) or not isinstance(msg['result'][2], int):
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ subscribe: {msg}")
                if future and not future.done():
                    future.set_exception(Exception("Invalid subscribe response"))
                return
            self.extranonce1 = msg['result'][1]
            self.extranonce2_size = msg['result'][2]
            logger.info(f"[EXTRANONCE1] –ü–æ–ª—É—á–µ–Ω: {self.extranonce1}, —Ä–∞–∑–º–µ—Ä: {self.extranonce2_size}")
            if future and not future.done():
                future.set_result(True)
        elif msg_id and request_info and request_info.get("method") == "mining.authorize" and msg.get("result") is True:
            self.authorized = True
            logger.info("[POOL] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            if future and not future.done():
                future.set_result(True)
        elif msg_id and "method" not in msg and not isinstance(msg.get("result"), list):
            if msg.get("result") is True:
                self.accepted_shares += 1
                logger.info("[SHARE] –ü—Ä–∏–Ω—è—Ç–∞")
                if future and not future.done():
                    future.set_result(True)
            else:
                self.rejected_shares += 1
                error = msg.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                logger.warning(f"[SHARE] –û—Ç–∫–ª–æ–Ω–µ–Ω–∞: –∫–æ–¥={error.get('code', 'N/A')}, –ø—Ä–∏—á–∏–Ω–∞={error.get('message', 'N/A')}")
                with self.get_db() as conn:
                    conn.execute(
                        "INSERT INTO submits (extranonce2, timestamp) VALUES (?, ?)",
                        ("rejected", int(time.time()))
                    )
                if future and not future.done():
                    future.set_exception(Exception(f"Share rejected: {error}"))

    def _handle_notify(self, params):
        try:
            job_id, coinb1, coinb2, merkle_branch, version, nbits, ntime, clean_jobs = params[:8]
            logger.debug(f"[RAW NOTIFY] job_id={job_id}, coinb1={coinb1}, coinb2={coinb2}")
            coinb1 = fix_hex_string(coinb1)
            coinb2 = fix_hex_string(coinb2)
            extranonce2 = self._select_best_extranonce2(job_id)
            extranonce1 = fix_hex_string(self.extranonce1) if self.extranonce1 else "00"
            merkle_root = calculate_merkle_root(coinb1, coinb2, extranonce1, extranonce2, merkle_branch)
            logger.info(f"[MERKLE ROOT] job_id={job_id} ‚Üí {merkle_root}")
            self._send_to_asic({
                "id": None,
                "method": "mining.notify",
                "params": [job_id, coinb1, coinb2, merkle_branch, version, nbits, ntime, clean_jobs]
            })
        except Exception as e:
            logger.error(f"[HANDLE NOTIFY] –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ notify: {e}")

    def _select_best_extranonce2(self, job_id):
        candidates = [f"{i:08x}" for i in range(256)]
        weights = {}
        for ex2 in candidates:
            total = sum(hashlib.sha256(bytes.fromhex(ex2)).digest())
            weights[ex2] = total % (2**32)
        sorted_weights = sorted(weights.items(), key=lambda item: item[1])
        top = sorted_weights[-5:]
        best = top[-1][0] if top else "00000000"
        return best

    def stop(self):
        self.running = False
        if self.pool_socket:
            self.pool_socket.close()
        if self.asic_socket:
            self.asic_socket.close()
        self.conn.close()
        self._cleanup_loop()

def fix_hex_string(s):
    global last_hex_warning_time, hex_warning_shown
    current_time = time.time()
    if len(s) % 2 != 0:
        if not hex_warning_shown or (current_time - last_hex_warning_time >= 100):
            logger.warning(f"[HEX FIX] –°—Ç—Ä–æ–∫–∞ –Ω–µ—á—ë—Ç–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º 0: {s}")
            last_hex_warning_time = current_time
            hex_warning_shown = True
        s = '0' + s
    return s

def calculate_merkle_root(coinb1, coinb2, extranonce1, extranonce2, branches):
    coinb1 = fix_hex_string(coinb1)
    coinb2 = fix_hex_string(coinb2)
    extranonce1 = fix_hex_string(extranonce1)
    extranonce2 = fix_hex_string(extranonce2)
    branches = [fix_hex_string(b) for b in branches]
    coinbase = coinb1 + extranonce1 + extranonce2 + coinb2
    logger.debug(f"[COINBASE RAW] {coinbase}")
    coinbase_bin = binascii.unhexlify(coinbase)
    coinbase_hash = hashlib.sha256(hashlib.sha256(coinbase_bin).digest()).digest()
    merkle_root = coinbase_hash
    for branch in branches:
        merkle_root = hashlib.sha256(hashlib.sha256(merkle_root + binascii.unhexlify(branch)).digest()).digest()
    return merkle_root.hex()

async def main_async():
    global server, proxy, telegram_handler
    logger.info("[STARTUP] –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
    local_server = None
    local_proxy = None
    local_telegram_handler = None
    try:
        logger.info(f"[PORT] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ {ASIC_PROXY_PORT}...")
        await ensure_port_available(ASIC_PROXY_PORT)
        logger.info(f"[PORT] –ü–æ—Ä—Ç {ASIC_PROXY_PORT} –¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.info(f"[SERVER] –ó–∞–ø—É—Å–∫ TCP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {ASIC_PROXY_HOST}:{ASIC_PROXY_PORT}...")
        local_server = ThreadedTCPServer((ASIC_PROXY_HOST, ASIC_PROXY_PORT), ASICHandler)
        local_proxy = PoolConnector(local_server)
        local_server.proxy = local_proxy
        server = local_server
        proxy = local_proxy
        local_proxy.start()
        threading.Thread(target=local_server.serve_forever, daemon=True).start()
        logger.info(f"[SERVER] –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {ASIC_PROXY_HOST}:{ASIC_PROXY_PORT}")

        async def handle_status(request):
            return web.json_response({
                "version": VERSION,
                "accepted_shares": proxy.accepted_shares,
                "rejected_shares": proxy.rejected_shares,
                "connected": proxy.pool_socket is not None,
                "pool_queue_size": proxy.pool_queue.qsize(),
                "asic_queue_size": proxy.asic_queue.qsize()
            })

        async def handle_shutdown(request):
            if local_telegram_handler:
                await local_telegram_handler.handle_shutdown()
            return web.Response(text="Shutting down...")

        app = web.Application()
        app.add_routes([
            web.get('/status', handle_status),
            web.get('/shutdown', handle_shutdown)
        ])
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
        logger.info("[HTTP] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")

        current_loop = asyncio.get_running_loop()
        local_telegram_handler = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_CHAT_ID, loop=current_loop)
        local_telegram_handler.setLevel(logging.DEBUG)
        local_telegram_handler.setFormatter(formatter)
        logger.addHandler(local_telegram_handler)
        telegram_handler = local_telegram_handler

        while not shutdown_event.is_set():
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"[MAIN] –û—à–∏–±–∫–∞ –≤ main_async: {e}")
        raise
    finally:
        logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã...")
        if local_proxy:
            local_proxy.stop()
        if local_server:
            local_server.shutdown()
        if local_telegram_handler:
            local_telegram_handler.disable()
        await asyncio.sleep(1)

if __name__ == "__main__":
    logger.info("üî• –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ if __name__ == '__main__'")
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(main_async())
    except KeyboardInterrupt:
        logger.warning("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        shutdown_event.set()
        if 'telegram_handler' in globals():
            telegram_handler.disable()
        if 'proxy' in globals():
            proxy.stop()
        if 'server' in globals():
            server.shutdown()
        logger.info("[SERVER] –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"[MAIN] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if not loop.is_closed():
            for task in asyncio.all_tasks(loop):
                task.cancel()
            loop.run_until_complete(loop.shutdown_asyncgens())
            loop.close()
        logger.info("[MAIN] Event loop –∑–∞–∫—Ä—ã—Ç")
        sys.exit(0)